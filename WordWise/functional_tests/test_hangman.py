from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from django.test import LiveServerTestCase
from selenium import webdriver
from selenium.webdriver.common.by import By
from unittest.mock import patch
from wordbank.models import wordBank
import time

class HangmanGameTest(LiveServerTestCase):
    def setUp(self):
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(10)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á server ‡∏à‡∏≥‡∏•‡∏≠‡∏á 
        self.driver.get(self.live_server_url)
    def tearDown(self):
        self.driver.quit()

    def test_hangman_game(self):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡∏à‡∏≥‡∏•‡∏≠‡∏á 
        wordBank.objects.create(word="BED", meaning="A piece of furniture for sleeping on")

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏Å‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏¥‡∏á‡∏Ñ‡πå Hangman game ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π 
        time.sleep(1)
        hangman_link = self.driver.find_element(By.LINK_TEXT, "Hangman Game")
        hangman_link.click()

        # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏µ‡∏Å‡∏•‡πà‡∏≠‡∏á class word 
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'word'))
        )
        
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞ 3 ‡πÄ‡∏™‡πâ‡∏ô ‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ Guess ‡πÅ‡∏•‡∏∞ ‡∏°‡∏µ‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ Guessed Letters: None"
        label = self.driver.find_element(By.CSS_SELECTOR, "label[for='letter']")
        guessed_letters = self.driver.find_element(By.ID, "guess").text
        word_display = self.driver.find_element(By.CLASS_NAME, 'word')
        guess_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        self.assertTrue(len(word_display.text.split()) == 3)  # 3-letter word
        self.assertTrue(word_display.text == "_ _ _")
        self.assertEqual(label.text, "Enter a letter:")  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô label
        self.assertEqual(guessed_letters ,"Guessed Letters: None")
        self.assertIn("Guess",guess_button.text)

        # ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏à‡∏≤‡∏Å database ‡∏°‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ web ‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏±‡πâ‡∏¢
        word_obj = wordBank.objects.get(word="BED")
        expected_hint = word_obj.meaning
        hint = self.driver.find_element(By.CSS_SELECTOR, ".meaning").text
        self.assertEqual("Hint: "+expected_hint, hint)

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ A ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Guess
        input_field = self.driver.find_element(By.NAME, "letter")
        guess_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        time.sleep(1)
        input_field.send_keys("A")
        time.sleep(1)
        guess_button.click()

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤ Guessed Letters: ‡∏à‡∏≤‡∏Å None ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô A ‡πÅ‡∏•‡∏∞Attempts Left: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 5 
        guessed_letters = self.driver.find_element(By.ID, "guess").text
        attempts_left = self.driver.find_element(By.CSS_SELECTOR, ".attempts").text
        self.assertEqual("Guessed Letters: A", guessed_letters)
        self.assertEqual("Attempts Left: 5", attempts_left)
        time.sleep(1)

        # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ input field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        input_field = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "letter"))
        ) 

        # ‡∏™‡πà‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ E ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Guess
        input_field.send_keys("E")
        guess_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        time.sleep(1)          
        guess_button.click()
        word_display = self.driver.find_element(By.CLASS_NAME, 'word')
        guessed_letters = self.driver.find_element(By.ID, "guess").text
        attempts_left = self.driver.find_element(By.CSS_SELECTOR, ".attempts").text
        self.assertEqual("Guessed Letters: A E", guessed_letters)
        self.assertEqual("Attempts Left: 5", attempts_left)
        self.assertTrue(word_display.text == "_ E _")
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏≤‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "BED"
        input_field = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "letter"))
        ) 

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß B 
        input_field.send_keys("B")
        guess_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        time.sleep(0.5)
        guess_button.click()

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß D 
        input_field = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "letter"))
        ) 
        input_field.send_keys("D")
        time.sleep(0.5)
        guess_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        guess_button.click()

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° üéâ Congratulations! You won! üéâ
        message =  self.driver.find_element(By.CLASS_NAME,"message")
        self.assertEqual("üéâ Congratulations! You won! üéâ",message.text)
        time.sleep(2)

         # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° Start New Game ‡∏°‡∏±‡πâ‡∏¢
        start_button = self.driver.find_element(By.CSS_SELECTOR, "button#restart")
        self.assertEqual("Start New Game",start_button.text);

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡πÉ‡∏ô database 
        wordBank.objects.all().delete() 
        wordBank.objects.create(word="WE", meaning="Referring to the speaker and others")

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Start New Game 
        start_button.click()
        time.sleep(1)
        # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ element ‡∏ó‡∏µ‡πà‡∏°‡∏µ class word ‡∏õ‡∏£‡∏≤‡∏Å‡∏è ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ word_display 
        new_word = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'word'))
        )
        word_obj = wordBank.objects.get(word="WE")
        expected_hint = word_obj.meaning

        hint = self.driver.find_element(By.CSS_SELECTOR, ".meaning").text
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞ 2 ‡∏ä‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ Hint: Referring to the speaker and others 
        self.assertEqual("Hint: "+expected_hint, hint)
        self.assertEqual(new_word.text,"_ _")
        time.sleep(1)

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß A , B , C ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏¢‡∏ó‡∏≥‡πÉ‡∏´‡πâ attempts_left ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 3 

        #  ------------------A--------------------
        input_field = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "letter"))
        ) 
        input_field.send_keys("A")
        guess_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        guess_button.click()
        time.sleep(0.5)   
        # ------------------B--------------------
        input_field = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "letter"))
        ) 
        input_field.send_keys("B")
        guess_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        guess_button.click()
        time.sleep(0.5)   
        # ------------------C--------------------
        input_field = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "letter"))
        ) 
        input_field.send_keys("C")
        guess_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        guess_button.click()
        attempts_left = self.driver.find_element(By.CSS_SELECTOR, ".attempts").text

        # ‡πÄ‡∏ó‡∏™‡∏ß‡πà‡∏≤ attempts_left ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 3 ‡∏à‡∏£‡∏¥‡∏á‡∏õ‡πà‡∏≤‡∏ß 
        self.assertEqual(attempts_left ,"Attempts Left: 3")
        time.sleep(1)   

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß A ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤ 'You already guessed that letter!'
        input_field = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.NAME, "letter"))
        )
        input_field.send_keys("A")
        time.sleep(0.5)

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Guess
        guess_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        guess_button.click()
        # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è
        alert_message = WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CLASS_NAME, "message"))
        )

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        self.assertEqual(alert_message.text, "You already guessed that letter!")
        time.sleep(2)
        
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà "‡∏Å" ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤ 'Please enter a valid single letter!'
        input_field = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.NAME, "letter"))
        )
        input_field.send_keys("‡∏Å")
        time.sleep(0.5)

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Guess
        guess_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        guess_button.click()
        # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è
        alert_message = WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.NAME, "letter"))
        )
        input_field.clear()
        time.sleep(1)

        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        self.assertEqual(alert_message.get_attribute("title"), "Please enter a valid single English letter (A-Z)!")
        time.sleep(1)
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏≠ D , Z , T ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏¢‡∏ó‡∏≥‡πÉ‡∏´‡πâ attempts_left ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0 ‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "üò¢ Game Over! The word was: WE"
        
        #  ------------------D--------------------
        input_field = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "letter"))
        ) 
        input_field.send_keys("D")
        guess_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        guess_button.click()
        time.sleep(1)   
        # ------------------Z--------------------
        input_field = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "letter"))
        ) 
        input_field.send_keys("Z")
        guess_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        guess_button.click()
        time.sleep(1)   
        # ------------------T--------------------
        input_field = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "letter"))
        ) 
        input_field.send_keys("T")
        guess_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )
        guess_button.click()
        attempts_left = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR,".attempts"))
        ).text

        # ‡πÄ‡∏ó‡∏™‡∏ß‡πà‡∏≤ attempts_left ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0 ‡∏à‡∏£‡∏¥‡∏á‡∏õ‡πà‡∏≤‡∏ß 
        self.assertEqual(attempts_left ,"Attempts Left: 0")
        time.sleep(1) 
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "üò¢ Game Over! The word was: WE"
        message =  self.driver.find_element(By.CLASS_NAME,"message")
        self.assertEqual("üò¢ Game Over! The word was: WE",message.text)
        time.sleep(2)
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ Back to menu ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Ñ‡πå Hangman Game
        back = self.driver.find_element(By.CLASS_NAME,"back_to_menu")
        self.assertEqual(back.text,"Back to menu")
        back.click()
        time.sleep(1)
        hangman_link = self.driver.find_element(By.LINK_TEXT, "Hangman Game")
        self.assertIsNotNone(hangman_link) 
        time.sleep(1)